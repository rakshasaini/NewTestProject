Working with Strings - Text with directions, references and code
To start irb console:

irb

To exit the console:

exit

String concat structure:

String1 + String2

String1 + " " + String2 + String3

To find out what class the object belongs to:

Variable_name.class

1.class # This will return integer, signifying that 1 is of type integer

# To find out methods available to an object:

objectname.methods

Some methods that can be used on objects:

objectname.nil?

objectname.empty?

objectname.length

objectname.reverse

String interpolation (remember has to be within double quotes):

name = "Mashrur"

"My name is #{name}"

**This will print out the value of name in the line "My name is...."

To escape the evaluation of #{variablename} within a String, prepend with a \:

\#{variablename}

To get input from the command line use the following method:

gets.chomp

To assign the input to a variable so it can be referenced later on:

variablename = gets.chomp

#This is a Comment
#Homework Solution: Analyzer program code
puts "Enter your first name"
first_name = gets.chomp
puts "Enter your last name"
last_name = gets.chomp
full_name = first_name + " " + last_name
puts "Your full name is #{full_name}"
puts "Your full name reversed is #{full_name.reverse}"
puts "Your name has #{full_name.length - 1} characters in it"

#Working with numbers - Text with directions, references and code
#To add and display the value of 1 + 2:

puts 1 + 2

Different operations:

1 + 2

1 * 2

1 / 2

1 - 2

1 % 2

To indicate a number is a float instead of an integer include a . in the number:

20 is an integer, 20.0 is a float

or

20.to_f

Methods you can use:

object.odd?

22.odd?

object.even?

22.even?

Comparisons:

a == b

1 == 2

3 == 3

5 < 2

2 <= 5

5 > 2

5 && 6

5 || 6

Generate a random number between 0 and less than 10:

rand(10)

To convert an string object to integer:

objectname.to_i

"5".to_i

To convert an object to string:

objectname.to_s

5.to_s

# Arrays and Iterators - Text with directions, references and code
Array, created by including elements within square brackets:

a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

The index for an array starts with 0, so in the array above a[0] is 1

Some methods you can use on arrays:

arrayname.empty?

arrayname.include?(itemname)

arrayname.reverse

arrayname.reverse! # use ! at the end to change the original array

arrayname.shuffle

arrayname.push(30) # will append new element 30 to the end array

arrayname << 25 # << known as shovel operator will also append new element to the end of the array

arrayname.unshift("someelement") # will add element "some element" to the beginning of the array

arrayname.pop # will remove the last element of the array and return 1

arrayname.uniq # will remove all the duplicates and display (will not change the original array)

arrayname.uniq! # will remove all the duplicates in the original array

A range:

(0..25).to_a

will create an array with elements from value 0 to 25

(0..99).to_a.shuffle!

will create an array with elements from value 0 to 99 in random order

To loop through an array named y using the .each method and print out the value of each element:

y.each { |i| puts i }

In plain terms: For each element i in array y print the value of i

To execute iteration through an array called names using a block:

names.each do |randomvariablename| # starts the do block

puts "Hello #{randomvariablename}" # executes code for each element

end # ends the do block

To capitalize (or use another method) on each element of array called names:

names.each { |randomvariablename| puts "Hello #{randomvariablename.capitalize}" }

Using the select method to pickup all the odd numbers from an array y:

y.select { |number| number.odd? } # selects the value and returns it only if the condition is met

To join the elements of an array named p:

p.join

To join the elements of an array with space in between each element:

p.join(" ")

To join the elements of an array with dash in between each element:

p.join("-")
